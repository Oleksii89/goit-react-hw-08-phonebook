{"version":3,"file":"static/js/596.89d994e6.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","Components/ContactForm/ContactForm.styled..js","Components/ContactForm/ContactForm.jsx","Components/Filter/Filter.styled.js","Components/ContactItem/ContactItem.styled.js","redux/contacts.selectors.js","Components/ContactItem/ContactItem.jsx","Components/ContactList/ContactList.styled.js","Components/ContactList/ContactList.jsx","Components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 300px;\n  border: 2px solid black;\n  padding: 10px;\n`;\nexport const StyledInput = styled.input`\n  margin-bottom: 15px;\n  height: 20px;\n  border-radius: 5px;\n  width: 250px;\n`;\n\nexport const StyledLabel = styled.label`\n  font-size: 20px;\n  margin-bottom: 8px;\n`;\n\nexport const StyledButton = styled.button`\n  box-sizing: border-box;\n  width: 100px;\n  height: 24px;\n  background: teal;\n  border: none;\n  cursor: pointer;\n  border-radius: 4px;\n  font-weight: 600;\n  font-size: 15px;\n`;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport {\n  StyledButton,\n  StyledForm,\n  StyledInput,\n  StyledLabel,\n} from './ContactForm.styled.';\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsSlice';\n\nconst ContactForm = () => {\n  const contacts = useSelector(state => state.contacts.contactsData);\n\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChangeName = evt => {\n    setName(evt.target.value);\n  };\n\n  const handleChangeNumber = evt => {\n    setNumber(evt.target.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    getContact({ name: name, phone: number, id: nanoid() });\n    // evt.currentTarget.reset();\n    setName(''); // clear input\n    setNumber(''); // clear input\n  };\n\n  const getContact = data => {\n    contacts.some(\n      contact => contact.name.toLowerCase() === data.name.toLowerCase()\n    )\n      ? alert(`${data.name} is already in contacts`)\n      : dispatch(addContact(data));\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <StyledLabel>\n        Name\n        <StyledInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={name}\n          onChange={handleChangeName}\n          required\n        />\n      </StyledLabel>\n      <StyledLabel>\n        Number\n        <StyledInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={number}\n          onChange={handleChangeNumber}\n          required\n        />\n      </StyledLabel>\n      <StyledButton type=\"submit\">Add contact</StyledButton>\n    </StyledForm>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\nexport const StyledFilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nexport const StyledFilterButton = styled.button`\n  width: 60px;\n  background-color: none;\n  box-sizing: border-box;\n  height: 24px;\n  background-color: white;\n  cursor: pointer;\n  border-radius: 4px;\n  font-weight: 400;\n  font-size: 15px;\n`;\n","import styled from 'styled-components';\n\nexport const StyledContactItemLi = styled.li`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n","export const selectContacts = state => state.contacts.contactsData;\nexport const selectContactsIsLoading = state => state.contacts.isLoading;\nexport const selectContactsError = state => state.contacts.error;\nexport const selectContactsFilter = state => state.filterData;\n","import { StyledFilterButton } from 'Components/Filter/Filter.styled';\nimport { StyledContactItemLi } from './ContactItem.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'redux/contactsSlice';\nimport { useEffect } from 'react';\nimport { Loader } from 'Components/Loader/Loader';\nimport {\n  selectContacts,\n  selectContactsError,\n  selectContactsIsLoading,\n} from 'redux/contacts.selectors';\n\nexport const ContactIem = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n\n  const filter = useSelector(state => state.filter.filterData);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {filteredContacts.map(({ name, phone, id }) => (\n        <StyledContactItemLi key={id}>\n          {name} : {[phone]}\n          <StyledFilterButton\n            type=\"button\"\n            onClick={() => {\n              onDeleteContact(id);\n            }}\n          >\n            Delete\n          </StyledFilterButton>\n        </StyledContactItemLi>\n      ))}\n    </div>\n  );\n};\n","import styled from 'styled-components';\nexport const ContactListUl = styled.ul`\n  width: 400px;\n  padding: 0;\n`;\n","import { ContactListUl } from './ContactList.styled';\n\nexport const ContactList = ({ children }) => {\n  return <ContactListUl>{children}</ContactListUl>;\n};\n","import {\n  StyledInput,\n  StyledLabel,\n} from 'Components/ContactForm/ContactForm.styled.';\nimport { StyledFilterContainer } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(state => state.filter.filterData);\n  const handleFilter = evt => {\n    dispatch(setFilter(evt.currentTarget.value));\n  };\n\n  const dispatch = useDispatch();\n  return (\n    <StyledFilterContainer>\n      <StyledLabel>Find contact by name</StyledLabel>\n      <StyledInput\n        type=\"text\"\n        value={filter}\n        onChange={handleFilter}\n      ></StyledInput>\n    </StyledFilterContainer>\n  );\n};\n","import ContactForm from 'Components/ContactForm/ContactForm';\nimport { ContactIem } from 'Components/ContactItem/ContactItem';\nimport { ContactList } from 'Components/ContactList/ContactList';\nimport { Filter } from 'Components/Filter/Filter';\nimport React from 'react';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList>\n        <ContactIem />\n      </ContactList>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","StyledForm","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","StyledLabel","_templateObject3","StyledButton","_templateObject4","contacts","useSelector","state","contactsData","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","getContact","data","some","contact","toLowerCase","alert","concat","addContact","_jsxs","onSubmit","evt","preventDefault","phone","children","_jsx","type","pattern","title","value","onChange","target","required","StyledFilterContainer","StyledFilterButton","StyledContactItemLi","selectContacts","selectContactsIsLoading","isLoading","selectContactsError","error","ContactIem","filter","filterData","useEffect","fetchContacts","filteredContacts","includes","Loader","map","_ref","onClick","contactId","deleteContact","ContactListUl","ContactList","Filter","setFilter","currentTarget","ContactForm"],"sourceRoot":""}